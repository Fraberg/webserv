			WEBSERV
Class:

http
	Parsing_header
	create_header

tcp connection (créer la connection avec arg constructeur: port...)
	send (header and body)
	receive (header body)

error (tuto gestion des error en oob)
	error message


config file (parsing like lua scipt)
	- parsing des info
	- création des différent objet grace au info (les serveur avec header)
utility
	- avec des méthodes static de fonctions util

Note
Une bad request 400 ferme la connexion




ret = recv(c->_accept_fd, c->_buffer, sizeof(c->_buffer), 0)) < 0)
if (ret == -1)
{
	if (errno != EWOULDBLOCK && errno != EAGAIN)
	{
    	std::cout << "error (recv - 1) " << _name << "/handleClientRequest/recv: " << std::string(strerror(errno)) << std::endl;
    	//close this fd
	}
    return (0);
}
else if (ret == 0)
{
    std::cout << _name << "(" << _port << ")" << " connection has been closed by the client (no error: " << std::string(strerror(errno)) << ")" << std::endl;
    // _clients.erase(c);
    return (0);
}
else
    std::cout << _name << "(" << _port << ")" << ": recv() is ok" << std::endl;



if ((ret = send(c->_accept_fd, hello, sizeof(hello), 0)) < 0)
{
	if (errno != EWOULDBLOCK && errno != EAGAIN)
	{
    	std::cout << "error " << _name << "/handleClientRequest/send: " << std::string(strerror(errno)) << std::endl;
    	//close this fd
	}
    return (0);
}
else
    std::cout << _name << "(" << _port << ")" << ": send() is ok" << std::endl;